# NIXLBench Container Build Configuration
# Builds and pushes NIXLBench containers with configurable NIXL/UCX versions

---
job: nixl-ci-nixlbench-container-build

# Build settings
failFast: false
timeout_minutes: 240

# Infrastructure
kubernetes:
  cloud: il-ipp-blossom-prod
  namespace: nbu-swx-nixl
  limits: "{memory: 16Gi, cpu: 8000m}"
  requests: "{memory: 8Gi, cpu: 4000m}"

runs_on_dockers:
  - name: "podman-v5.0.2"
    url: "quay.io/podman/stable:v5.0.2"
    category: 'tool'
    privileged: true

# Build matrix
matrix:
  axes:
    arch:
      - x86_64
      - aarch64

# Configuration
env:
  ARTIFACTORY_HOST: "urm.nvidia.com"
  ARTIFACTORY_REPO_PATH: "sw-nbu-swx-nixl-docker-local/verification/nixlbench"
  BUILD_SCRIPT: "benchmark/nixlbench/contrib/build.sh"
  LOCAL_TAG_BASE: "nixlbench:build-"

credentials:
  - credentialsId: 'svc-nixl-artifactory-token'
    usernameVariable: 'ARTIFACTORY_USERNAME'
    passwordVariable: 'ARTIFACTORY_PASSWORD'

pipeline_start:
  shell: action
  module: groovy
  run: |
    def suffix = params.TAG_SUFFIX ? "-${params.TAG_SUFFIX}" : ""
    currentBuild.displayName += "-${params.NIXL_VERSION}-${params.UCX_VERSION}${suffix}"

# Build pipeline
steps:
  - name: Prepare
    parallel: false
    containerSelector: "{ name: 'podman.*' }"
    run: |
      # Setup podman and dependencies
      rm -f /etc/containers/storage.conf
      podman system reset -f || true
      ln -sfT $(type -p podman) /usr/bin/docker
      yum install -y git gettext

      # Clone UCX source
      git clone https://github.com/openucx/ucx.git ucx-src
      cd ucx-src && git checkout "${UCX_VERSION}"

  - name: Build
    parallel: false
    containerSelector: "{ name: 'podman.*' }"
    run: |
      LOCAL_TAG="${LOCAL_TAG_BASE}${arch}"

      "${BUILD_SCRIPT}" \
        --nixl "$PWD" \
        --ucx "$PWD/ucx-src" \
        --base-image "${BASE_IMAGE}" \
        --base-image-tag "${BASE_IMAGE_TAG}" \
        --tag "${LOCAL_TAG}" \
        --arch "${arch}" \
        --no-cache

      # Generate version info file from template
      export BUILD_TIMESTAMP="$(date -u '+%Y-%m-%dT%H:%M:%SZ')" \
             NIXL_VERSION UCX_VERSION BASE_IMAGE BASE_IMAGE_TAG arch \
             BUILD_NUMBER BUILD_URL JOB_NAME NODE_NAME WORKSPACE
      envsubst < .ci/assets/nixlbench-version-info.json.template > version-info.json

      # Add version info to the image
      CONTAINER_ID=$(docker create "${LOCAL_TAG}")
      docker cp version-info.json "${CONTAINER_ID}:/opt/nixlbench-version.json"
      docker commit "${CONTAINER_ID}" "${LOCAL_TAG}"

  - name: Push
    parallel: false
    containerSelector: "{ name: 'podman.*' }"
    credentialsId: 'svc-nixl-artifactory-token'
    run: |
      LOCAL_TAG="${LOCAL_TAG_BASE}${arch}"
      ARTIFACTORY_REGISTRY="${ARTIFACTORY_HOST}/${ARTIFACTORY_REPO_PATH}"

      # Sanitize versions for Docker tag compatibility (replace / and truncate)
      CLEAN_NIXL=${NIXL_VERSION//\//-}
      CLEAN_NIXL=${CLEAN_NIXL:0:14}
      CLEAN_UCX=${UCX_VERSION//\//-}
      CLEAN_UCX=${CLEAN_UCX:0:8}

      # Login to Artifactory
      echo "$ARTIFACTORY_PASSWORD" | docker login "${ARTIFACTORY_REGISTRY}" -u "$ARTIFACTORY_USERNAME" --password-stdin

      # Prepare Artifactory API and image metadata
      ARTIFACTORY_API="https://${ARTIFACTORY_HOST}/artifactory/api/storage/${ARTIFACTORY_REPO_PATH}"
      IMAGE_PROPERTIES="NIXL_VERSION=${NIXL_VERSION};UCX_VERSION=${UCX_VERSION};arch=${arch};"
      IMAGE_PROPERTIES+="BUILD_NUMBER=${BUILD_NUMBER};JOB_NAME=${JOB_NAME};"
      IMAGE_PROPERTIES+="BUILD_URL=${BUILD_URL};NODE_NAME=${NODE_NAME};"
      IMAGE_PROPERTIES+="BASE_IMAGE=${BASE_IMAGE};BASE_IMAGE_TAG=${BASE_IMAGE_TAG}"

      # Function to tag, push, and set properties
      tag_push_set_properties() {
        local target_tag="$1"
        echo "Creating tag: ${target_tag}"
        docker tag "${LOCAL_TAG}" "${ARTIFACTORY_REGISTRY}:${target_tag}"
        docker push "${ARTIFACTORY_REGISTRY}:${target_tag}"
        curl -H "Authorization: Bearer ${ARTIFACTORY_PASSWORD}" -X PUT \
          "${ARTIFACTORY_API}/${target_tag}?properties=${IMAGE_PROPERTIES}"
      }

      # Always create standard tag: base-nixl-version-ucx-version-arch[-suffix]
      TAG_NAME="${BASE_IMAGE_TAG}-nixl-${CLEAN_NIXL}-ucx-${CLEAN_UCX}-${arch}${TAG_SUFFIX:+-${TAG_SUFFIX}}"
      tag_push_set_properties "${TAG_NAME}"

      # Check if latest tag should be updated
      if [[ "${UPDATE_LATEST}" == "true" ]]; then
        tag_push_set_properties "${BASE_IMAGE_TAG}-${arch}-latest"
      fi
