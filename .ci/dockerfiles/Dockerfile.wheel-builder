# NixL Wheel Builder Environment
# This Dockerfile creates a pre-built environment for building Python wheels

FROM harbor.mellanox.com/ucx/cuda:12.8-devel-manylinux--25.03

ARG ARCH="x86_64"
ARG UCX_REF="v1.19.x"
ARG GRPC_VERSION="1.73.0"
ARG CPPRESTSDK_VERSION="2.10.19"
ARG OPENSSL_VERSION="3.0.16"
ARG GDRCOPY_VERSION="2.5"
ARG RUST_VERSION="1.86.0"
ARG NPROC="4"

# Install system packages
RUN yum groupinstall -y 'Development Tools' && \
    dnf install -y almalinux-release-synergy && \
    dnf config-manager --set-enabled powertools && \
    dnf install -y \
        boost \
        boost-devel \
        cmake \
        git \
        ninja-build \
        python3 \
        python3-devel \
        python3-pip \
        pkg-config \
        curl \
        wget \
        which \
        zlib-devel \
        autoconf \
        automake \
        libtool \
        m4 \
        dkms \
        libibverbs \
        libibverbs-devel \
        rdma-core \
        rdma-core-devel \
        libibumad \
        libibumad-devel \
        numactl-devel \
        librdmacm-devel && \
    dnf clean all

# Build OpenSSL 3.x
RUN yum install -y perl-IPC-Cmd perl-Test-Simple perl-Data-Dumper
RUN cd /tmp && \
    wget -q https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz && \
    tar -xzf openssl-${OPENSSL_VERSION}.tar.gz && \
    cd openssl-${OPENSSL_VERSION} && \
    ./Configure --prefix=/usr/local/openssl3 --openssldir=/usr/local/openssl3 \
        shared zlib linux-$ARCH && \
    make -j${NPROC} && \
    make install_sw && \
    echo "/usr/local/openssl3/lib64" > /etc/ld.so.conf.d/openssl3.conf && \
    echo "/usr/local/openssl3/lib" >> /etc/ld.so.conf.d/openssl3.conf && \
    ldconfig && \
    rm -rf /tmp/openssl-${OPENSSL_VERSION}*

# Set environment variables to use the new OpenSSL
ENV PKG_CONFIG_PATH="/usr/local/openssl3/lib64/pkgconfig:/usr/local/openssl3/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH"
ENV OPENSSL_ROOT_DIR="/usr/local/openssl3"
ENV OPENSSL_LIBRARIES="/usr/local/openssl3/lib64:/usr/local/openssl3/lib"
ENV OPENSSL_INCLUDE_DIR="/usr/local/openssl3/include"

# Set global CMAKE variables
ENV CMAKE_BUILD_TYPE=Release
ENV CMAKE_INSTALL_PREFIX=/usr/local

# Build gRPC with OpenSSL 3
WORKDIR /workspace

RUN git clone --recurse-submodules -b v${GRPC_VERSION} --depth 1 --shallow-submodules https://github.com/grpc/grpc && \
    cd grpc && \
    mkdir -p cmake/build && \
    cd cmake/build && \
    cmake -DgRPC_INSTALL=ON \
        -DgRPC_BUILD_TESTS=OFF \
        -DgRPC_ABSL_PROVIDER=module \
        -DgRPC_CARES_PROVIDER=module \
        -DgRPC_PROTOBUF_PROVIDER=module \
        -DgRPC_RE2_PROVIDER=module \
        -DgRPC_ZLIB_PROVIDER=module \
        -DgRPC_SSL_PROVIDER=package ../.. && \
    make -j${NPROC} && \
    make install && \
    cd /workspace && rm -rf grpc

RUN git clone https://github.com/microsoft/cpprestsdk.git && \
    cd cpprestsdk && \
    git checkout v${CPPRESTSDK_VERSION} && \
    mkdir build && cd build && \
    git submodule update --init && \
    cmake .. -DCPPREST_EXCLUDE_WEBSOCKETS=ON \
        -DCPPREST_EXCLUDE_COMPRESSION=ON \
        -DBUILD_SAMPLES=OFF \
        -DBUILD_TESTS=OFF \
        -DBoost_NO_BOOST_CMAKE=TRUE \
        -DOPENSSL_ROOT_DIR=/usr/local/openssl3 \
        -DOPENSSL_CRYPTO_LIBRARY=/usr/local/openssl3/lib64/libcrypto.so \
        -DOPENSSL_SSL_LIBRARY=/usr/local/openssl3/lib64/libssl.so \
        -DOPENSSL_INCLUDE_DIR=/usr/local/openssl3/include \
        -DCMAKE_CXX_FLAGS="-Wno-error=format-truncation" && \
    make -j${NPROC} cpprest && make install && \
    cd /workspace && rm -rf cpprestsdk

RUN git clone https://github.com/etcd-cpp-apiv3/etcd-cpp-apiv3.git && \
    cd etcd-cpp-apiv3 && mkdir build && cd build && \
    cmake .. && make -j${NPROC} && make install && \
    cd /workspace && rm -rf etcd-cpp-apiv3

# Remove existing UCX installations
RUN rm -rf /usr/lib/ucx
RUN rm -rf /opt/hpcx/ucx

# Build gdrcopy (required for UCX with CUDA support)
RUN cd /workspace && \
    git clone https://github.com/NVIDIA/gdrcopy.git && \
    cd gdrcopy/packages && \
    git checkout v${GDRCOPY_VERSION} && \
    CUDA=/usr/local/cuda ./build-rpm-packages.sh && \
    rpm -Uvh gdrcopy-kmod-${GDRCOPY_VERSION}-1dkms.el8.noarch.rpm && \
    rpm -Uvh gdrcopy-${GDRCOPY_VERSION}-1.el8.$ARCH.rpm && \
    rpm -Uvh gdrcopy-devel-${GDRCOPY_VERSION}-1.el8.noarch.rpm

# Build UCX
RUN mkdir -p /usr/local/src && cd /usr/local/src && \
     git clone https://github.com/openucx/ucx.git && \
     cd ucx && 			     \
     git checkout $UCX_REF &&	     \
     ./autogen.sh && ./configure     \
         --enable-shared             \
         --disable-static            \
         --disable-doxygen-doc       \
         --enable-optimizations      \
         --enable-cma                \
         --enable-devel-headers      \
         --with-cuda=/usr/local/cuda \
         --with-verbs                \
         --with-dm                   \
         --with-gdrcopy=/usr/local   \
         --with-efa                  \
         --enable-mt &&              \
     make -j${NPROC} &&                      \
     make -j${NPROC} install-strip &&        \
     ldconfig

COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Install Rust for meson
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH \
    RUST_VERSION=${RUST_VERSION}

RUN case "$ARCH" in \
        aarch64) RUSTARCH=aarch64-unknown-linux-gnu ;; \
        x86_64) RUSTARCH=x86_64-unknown-linux-gnu ;; \
        *) echo "Unsupported architecture for Rust: $ARCH" && exit 1 ;; \
    esac && \
    wget --tries=3 --waitretry=5 "https://static.rust-lang.org/rustup/archive/1.28.1/${RUSTARCH}/rustup-init" && \
    case "$ARCH" in \
        aarch64) RUSTUP_SHA256="c64b33db2c6b9385817ec0e49a84bcfe018ed6e328fe755c3c809580cc70ce7a" ;; \
        x86_64) RUSTUP_SHA256="a3339fb004c3d0bb9862ba0bce001861fe5cbde9c10d16591eb3f39ee6cd3e7f" ;; \
        *) echo "Unsupported architecture for Rust: $ARCH" && exit 1 ;; \
    esac && \
    echo "$RUSTUP_SHA256 *rustup-init" | sha256sum -c - && \
    chmod +x rustup-init && \
    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${RUSTARCH} && \
    rm rustup-init && \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME

# Set library paths
ENV LD_LIBRARY_PATH="/usr/local/openssl3/lib64:/usr/local/openssl3/lib:/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH"
ENV CUDA_PATH="/usr/local/cuda"

# Set working directory
WORKDIR /workspace

# Pre-install Python build tools for wheel building
RUN uv pip install --system meson-python pybind11 patchelf auditwheel pyyaml pytest
